# main.py
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
try:
    from ai import generate_description
except ImportError:
    def generate_description(name, cat): return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π."

try:
    from russian_suppliers import find_russian_product
except ImportError:
    def find_russian_product(query):
        return {
            "name": f"–¢—Ä–µ–Ω–¥–æ–≤—ã–π {query}",
            "price_rub": 450,
            "image": "https://pics.aliexpress.com/...jpg",
            "delivery_days": 5,
            "supplier": "AliExpress (—á–µ—Ä–µ–∑ –†–§-—Å–∫–ª–∞–¥)"
        }

try:
    from notion import create_landing_page
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.environ.get("PORT", 10000))

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")],
        [KeyboardButton(text="–û–¥–µ–∂–¥–∞")],
        [KeyboardButton(text="–ì–∞–¥–∂–µ—Ç—ã")],
        [KeyboardButton(text="–î–æ–º –∏ –¥–∞—á–∞")],
        [KeyboardButton(text="–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *DropHub*!\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥–∞ –≤ –†–§.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?",
        reply_markup=categories_kb,
        parse_mode="Markdown"
    )

@dp.message(lambda m: m.text in ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–ì–∞–¥–∂–µ—Ç—ã", "–î–æ–º –∏ –¥–∞—á–∞", "–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥"])
async def category_chosen(message: types.Message):
    query = message.text
    await message.answer("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã —É —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...")

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä
    product = find_russian_product(query)
    if not product:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –†–∞—Å—á—ë—Ç
    cost = product["price_rub"]
    delivery_cost = 150  # –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞
    sale_price = int(cost * 2.2)  # –ù–∞—Ü–µ–Ω–∫–∞ 120%
    profit = sale_price - cost - delivery_cost
    margin = int((profit / (cost + delivery_cost)) * 100)

    # –û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ò–ò
    description = generate_description(product["name"], query)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
    await message.answer_photo(
        photo=product["image"],
        caption=(
            f"üì¶ *{product['name']}*\n\n"
            f"üí° {description}\n\n"
            f"üõí –ü–æ—Å—Ç–∞–≤—â–∏–∫: *{product['supplier']}*\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {product['delivery_days']} –¥–Ω–µ–π\n\n"
            f"üí∞ –ó–∞–∫—É–ø–∫–∞: {cost} ‚ÇΩ\n"
            f"üéØ –ü—Ä–æ–¥–∞–∂–∞: {sale_price} ‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit} ‚ÇΩ ({margin}%)\n\n"
            f"–°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥?"
        ),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="create_landing"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="next_product")
                ]
            ]
        )
    )

@dp.callback_query(lambda c: c.data == "create_landing")
async def create_landing(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å notion.py
        from notion import create_landing_page
        landing_url = create_landing_page({
            "name": "–£–º–Ω–∞—è —Ä–æ–∑–µ—Ç–∫–∞",
            "price": "1990 ‚ÇΩ",
            "description": "–£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ –ê–ª–∏—Å—É"
        })
        await callback.message.answer(
            "‚úÖ –õ–µ–Ω–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üëâ {landing_url}\n\n"
            "–ö–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –ø—É–±–ª–∏–∫—É–π –≤ Telegram / TikTok!"
        )
    except:
        await callback.message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.\n\n"
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ª–µ–Ω–¥–∏–Ω–≥. –ü–æ–∫–∞ –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
    await callback.answer()

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="DropHub is running", status=200)

async def start_web_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await start_web_server()
    print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
