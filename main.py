# main.py
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PORT = int(os.environ.get("PORT", 10000))

# === –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ===
user_data = {}

# === –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ò–ò ===
try:
    from ai import generate_description
except ImportError:
    # –ï—Å–ª–∏ ai.py –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    def generate_description(product_name, category):
        return "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π. –í —Ç—Ä–µ–Ω–¥–µ."

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ===
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")],
        [KeyboardButton(text="üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ")],
        [KeyboardButton(text="üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏")],
        [KeyboardButton(text="üéÆ –ò–≥—Ä—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="üè† –î–æ–º –∏ —Å–∞–¥")],
        [KeyboardButton(text="üëó –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å")],
        [KeyboardButton(text="üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ")],
        [KeyboardButton(text="üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö")],
        [KeyboardButton(text="üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ")],
        [KeyboardButton(text="üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã")]
    ],
    resize_keyboard=True
)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *DropHub*!\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥–∞ –≤ –†–§.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?",
        reply_markup=categories_kb,
        parse_mode="Markdown"
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
@dp.message(lambda m: m.text in [
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ", "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏",
    "üéÆ –ò–≥—Ä—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏", "üè† –î–æ–º –∏ —Å–∞–¥", "üëó –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
    "üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ", "üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã"
])
async def category_chosen(message: types.Message):
    user_id = message.from_user.id
    category = message.text

    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    product_name = category.replace("üì± ", "").replace("üéß ", "").replace("üíª ", "").replace("üéÆ ", "") \
                          .replace("üè† ", "").replace("üëó ", "").replace("üíÑ ", "").replace("üêæ ", "") \
                          .replace("üöó ", "").replace("üß∏ ", "") + " –ø–æ –∞–∫—Ü–∏–∏"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò
    description = generate_description(product_name, category)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—â–µ–º
    await message.answer(
        f"üîç –ò—â—É —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *{category}*...",
        parse_mode="Markdown"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
    await message.answer(
        f"üì¶ *{product_name}*\n\n"
        f"üí° {description}\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: ~500 ‚ÇΩ\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: 1490 ‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: 10‚Äì14 –¥–Ω–µ–π\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–µ–Ω–¥–∏–Ω–≥?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_product"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="next_product")
                ]
            ]
        )
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(lambda c: c.data == "add_product")
async def add_product(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.\n\n"
        "–°–∫–æ—Ä–æ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ª–µ–Ω–¥–∏–Ω–≥ –≤ Notion ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏!"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "next_product")
async def next_product(callback: types.CallbackQuery):
    await callback.message.answer("üîç –ò—â—É –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä‚Ä¶")
    await callback.answer()

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "No open ports detected") ===
async def health_check(request):
    return web.Response(text="Bot is running", status=200)

async def start_web_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await start_web_server()
    print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(main())
