# main.py
import os
import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
else:
    logger.info("‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

PORT = int(os.environ.get("PORT", 10000))

# === –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")],
        [KeyboardButton(text="üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ")],
        [KeyboardButton(text="üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏")],
        [KeyboardButton(text="üéÆ –ò–≥—Ä—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="üè† –î–æ–º –∏ —Å–∞–¥")],
        [KeyboardButton(text="üëó –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å")],
        [KeyboardButton(text="üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ")],
        [KeyboardButton(text="üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö")],
        [KeyboardButton(text="üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ")],
        [KeyboardButton(text="üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã")]
    ],
    resize_keyboard=True
)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ DeepSeek (–ë–ï–ó –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞) ===
def generate_description(product_name, category):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –≤ main.py ‚Äî —á—Ç–æ–±—ã –ù–ï –ë–´–õ–û –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º ai.py
    """
    DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
    if not DEEPSEEK_API_KEY:
        logger.error("‚ùå DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return "–û—à–∏–±–∫–∞: –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–ª—é—á API –Ω–µ –Ω–∞–π–¥–µ–Ω."

    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = f"–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ, —Ü–µ–ø–ª—è—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'. –°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—ã–≥–æ–¥–µ, —É–¥–æ–±—Å—Ç–≤–µ, —Ç—Ä–µ–Ω–¥–µ. –ù–µ –±–æ–ª–µ–µ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 200,
        "temperature": 0.8
    }

    try:
        logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ DeepSeek...")
        response = requests.post(url, headers=headers, json=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            text = result["choices"][0]["message"]["content"].strip()
            logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek –ø–æ–ª—É—á–µ–Ω")
            return text
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek: {response.status_code} - {response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {response.status_code}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            
    except requests.exceptions.Timeout:
        logger.error("‚ùå –ó–∞–ø—Ä–æ—Å –∫ DeepSeek –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return "‚ùå –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–ò. –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç."
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *DropHub*!\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥–∞ –≤ –†–§.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?",
        reply_markup=categories_kb,
        parse_mode="Markdown"
    )

@dp.message(lambda m: m.text in [
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ", "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏",
    "üéÆ –ò–≥—Ä—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏", "üè† –î–æ–º –∏ —Å–∞–¥", "üëó –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
    "üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ", "üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã"
])
async def category_chosen(message: types.Message):
    category = message.text
    product_name = category.replace("üì± ", "").replace("üéß ", "").replace("üíª ", "").replace("üéÆ ", "") \
                          .replace("üè† ", "").replace("üëó ", "").replace("üíÑ ", "").replace("üêæ ", "") \
                          .replace("üöó ", "").replace("üß∏ ", "") + " –ø–æ –∞–∫—Ü–∏–∏"

    await message.answer(
        f"üîç –ò—â—É —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *{category}*...",
        parse_mode="Markdown"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = generate_description(product_name, category)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"üì¶ *{product_name}*\n\n"
        f"üí° {description}\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: ~500 ‚ÇΩ\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: 1490 ‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: 10‚Äì14 –¥–Ω–µ–π",
        parse_mode="Markdown"
    )

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="Bot is running", status=200)

async def start_web_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await start_web_server()
    logger.info(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
