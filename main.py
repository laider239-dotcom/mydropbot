# main.py
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Render –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å PORT, –Ω–æ –¥–ª—è –±–æ—Ç–∞ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
PORT = int(os.environ.get("PORT", 8000))

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")],
        [KeyboardButton(text="–û–¥–µ–∂–¥–∞")],
        [KeyboardButton(text="–ì–∞–¥–∂–µ—Ç—ã")],
        [KeyboardButton(text="–î–æ–º –∏ –¥–∞—á–∞")],
        [KeyboardButton(text="–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî DropBot ü§ñ\n"
        "–ü–æ–º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥ –∑–∞ 5 –º–∏–Ω—É—Ç.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?",
        reply_markup=categories_kb
    )

@dp.message(lambda m: m.text in ["–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–ì–∞–¥–∂–µ—Ç—ã", "–î–æ–º –∏ –¥–∞—á–∞", "–ö—Ä–∞—Å–æ—Ç–∞ –∏ —É—Ö–æ–¥"])
async def category_chosen(message: types.Message):
    user_id = message.from_user.id
    category = message.text
    user_data[user_id] = {"category": category}

    await message.answer(
        f"üîç –ò—â—É —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *{category}*...",
        parse_mode="Markdown"
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò (–∏–∑ ai.py)
    product_name = "–£–º–Ω–∞—è —Ä–æ–∑–µ—Ç–∫–∞ —Å Wi-Fi"
    description = "–£–º–Ω–∞—è —Ä–æ–∑–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ –ê–ª–∏—Å—É. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–æ–π –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –¥–æ–º–∞."
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
    await message.answer(
        f"üîã {product_name}\n\n"
        f"üí° {description}\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: ~500 ‚ÇΩ\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: 1490 ‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: 10‚Äì14 –¥–Ω–µ–π\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–µ–Ω–¥–∏–Ω–≥?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_product"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="next_product")
                ]
            ]
        )
    )

@dp.callback_query(lambda c: c.data == "add_product")
async def add_product(callback: types.CallbackQuery):
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω! –°–∫–æ—Ä–æ —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ª–µ–Ω–¥–∏–Ω–≥ –≤ Notion.")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "next_product")
async def next_product(callback: types.CallbackQuery):
    await callback.message.answer("üîç –ò—â—É –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä...")
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)  # –£–±—Ä–∞–ª–∏ resolve_allowed_updates()

if __name__ == "__main__":
    asyncio.run(main())

