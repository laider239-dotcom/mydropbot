# main.py
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
PORT = int(os.environ.get("PORT", 10000))

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã")],
        [KeyboardButton(text="üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ")],
        [KeyboardButton(text="üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏")],
        [KeyboardButton(text="üéÆ –ò–≥—Ä—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="üè† –î–æ–º –∏ —Å–∞–¥")],
        [KeyboardButton(text="üëó –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å")],
        [KeyboardButton(text="üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ")],
        [KeyboardButton(text="üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö")],
        [KeyboardButton(text="üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ")],
        [KeyboardButton(text="üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî DropBot ü§ñ\n"
        "–ü–æ–º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä–æ–ø—à–∏–ø–ø–∏–Ω–≥ –∑–∞ 5 –º–∏–Ω—É—Ç.\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å?",
        reply_markup=categories_kb
    )

@dp.message(lambda m: m.text in [
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "üéß –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∞—É–¥–∏–æ", "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –Ω–æ—É—Ç–±—É–∫–∏",
    "üéÆ –ò–≥—Ä—ã –∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏", "üè† –î–æ–º –∏ —Å–∞–¥", "üëó –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
    "üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "üêæ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ", "üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã"
])
async def category_chosen(message: types.Message):
    user_id = message.from_user.id
    category = message.text
    user_data[user_id] = {"category": category}

    await message.answer(
        f"üîç –ò—â—É —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *{category}*...",
        parse_mode="Markdown"
    )

    product_name = category.replace("üì± ", "").replace("üéß ", "").replace("üíª ", "") + " –ø–æ –∞–∫—Ü–∏–∏"
    await message.answer(
        f"üì¶ *{product_name}*\n\n"
        f"üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π. –í —Ç—Ä–µ–Ω–¥–µ –Ω–∞ TikTok.\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: ~600 ‚ÇΩ\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: 1990 ‚ÇΩ\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: 10‚Äì18 –¥–Ω–µ–π\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–µ–Ω–¥–∏–Ω–≥?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_product"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="next_product")
                ]
            ]
        )
    )

@dp.message(lambda message: message.text.startswith("/find"))
async def find_product(message: types.Message):
    query = message.text.replace("/find", "").strip()
    
    if not query:
        await message.answer("–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏—â–µ—à—å. –ù–∞–ø—Ä–∏–º–µ—Ä: `/find –Ω–∞—É—à–Ω–∏–∫–∏`", parse_mode="Markdown")
        return

    await message.answer(
        f"üîç –ò—â—É —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*...",
        parse_mode="Markdown"
    )

    products = [
        {
            "name": f"–¢—Ä–µ–Ω–¥–æ–≤—ã–µ {query} 2025",
            "cost": "500 ‚ÇΩ",
            "price": "1790 ‚ÇΩ",
            "delivery": "12‚Äì16 –¥–Ω–µ–π",
            "desc": "–í–∏—Ä—É—Å–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ TikTok. –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è."
        },
        {
            "name": f"–ü—Ä–µ–º–∏—É–º {query} —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
            "cost": "700 ‚ÇΩ",
            "price": "2290 ‚ÇΩ",
            "delivery": "10‚Äì14 –¥–Ω–µ–π",
            "desc": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π."
        }
    ]

    for p in products:
        await message.answer(
            f"‚ú® *{p['name']}*\n\n"
            f"üí° {p['desc']}\n\n"
            f"üí∞ –ó–∞–∫—É–ø–∫–∞: {p['cost']}\n"
            f"üéØ –ü—Ä–æ–¥–∞–∂–∞: {p['price']}\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {p['delivery']}\n\n"
            f"–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–µ–Ω–¥–∏–Ω–≥?",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞",
                            callback_data=f"add_{p['name'][:10]}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –ù–µ—Ç",
                            callback_data="next_product"
                        )
                    ]
                ]
            )
        )

@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_product(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω.\n\n"
        "–°–∫–æ—Ä–æ —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –ª–µ–Ω–¥–∏–Ω–≥ –≤ Notion ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏!"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "next_product")
async def next_product(callback: types.CallbackQuery):
    await callback.message.answer("üîç –ò—â—É –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä‚Ä¶")
    await callback.answer()

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
async def health_check(request):
    return web.Response(text="Bot is running", status=200)

async def start_web_server():
    app = web.Application()
    app.router.add_get('/health', health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await start_web_server()
    print(f"Web server started on port {PORT}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º ‚Äî –ø—É—Å—Ç—å Render —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–µ—Ä–≤–∏—Å

if __name__ == "__main__":
    asyncio.run(main())
